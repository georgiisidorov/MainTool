import datetime
import logging
import random

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ContentType, MediaGroup, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
import asyncio

from data import config
from handlers.users.jap_api import api_service, api_status
from keyboards.inline.button import main_keyboard, main_keyboard_test, balance_keyboard, services_keyboard, markup_pay, prices_keyboard, reactions_keyboard, return_keyboard, main_keyboard_VIP, main_keyboard_VIP_test, commands_keyboard, confirm_keyboard, statistics_keyboard, commands_return_keyboard, services_keyboard_instant, auto_keyboard, cancel_keyboard, auto_buttons_keyboard, markup_disconnect
from loader import dp
from states.states import States
from utils.db_api import quick_commands
from utils.misc.qiwi import Payment, NoPaymentFound, NotEnoughMoney


rct = {"6571": "üëç", "6572": "üëé", "6573": "‚ù§Ô∏è", "6574": "üî•", "6575": "üéâ", 
    "6576": "ü§©", "6577": "üò±", "6578": "üòÅ", "6579": "üò¢", "6580": "üí©", 
    "6581": "ü§Æ"}

def time_now():
    now = str(datetime.datetime.now())
    index_dot = now.index('.')
    now = now[:index_dot] + ' –ø–æ –ú–°–ö'
    return now


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@dp.message_handler(CommandStart())
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        fullname = message.from_user.first_name + ' ' + message.from_user.last_name
    except TypeError:
        fullname = message.from_user.first_name

    username = message.from_user.username or None
    await quick_commands.add_user(user_id, username, fullname, datetime.datetime.now(), 3000)

    user = await quick_commands.select_user(user_id)
    if message.from_user.id in [1247122892, 1048524289, 83335761]:
        if user.test_3k > 0:
            msg = await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_VIP_test)
            await state.update_data(message_id=msg.message_id)
        else:
            msg = await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_VIP)
            await state.update_data(message_id=msg.message_id)
    else:
        if user.test_3k > 0:
            msg = await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_test)
            await state.update_data(message_id=msg.message_id)
        else:
            msg = await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard)
            await state.update_data(message_id=msg.message_id)


# @dp.message_handler()
# async def frhefh(message: Message):
#     if message.from_user.id == 1247122892:
#         await message.answer(message)


# @dp.message_handler(content_types=ContentType.DOCUMENT)
# async def frhefh(message: Message):
#     if message.from_user.id == 1247122892:
#         await message.answer(message)


# @dp.message_handler(content_types=ContentType.ANY)
# async def frhefh(message: Message):
#     if message.from_user.id == 1247122892:
#         await message.answer(message)


# @dp.message_handler(content_types=ContentType.AUDIO)
# async def frhefh(message: Message):
#     if message.from_user.id == 1247122892:
#         await message.answer(message)


# ----------------------- –ë –ê –õ –ê –ù –° ------------------------


@dp.callback_query_handler(text='balance')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º', 
        reply_markup=balance_keyboard)


@dp.callback_query_handler(text='deposit')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç—É —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ (–≤ —Ä—É–±–ª—è—Ö)', reply_markup=return_keyboard)
    await States.Deposit.set()


@dp.callback_query_handler(text='checkbalance')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    await call.message.edit_text(f'–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>', 
        parse_mode='html', reply_markup=return_keyboard)


@dp.message_handler(state=States.Deposit, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 100 and amount > 1:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100‚ÇΩ", user_id, message_id, reply_markup=return_keyboard)
        else:
            payment = Payment(amount=amount)
            payment.create()

            markup = await markup_pay(payment.invoice)

            await dp.bot.edit_message_text(
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ –Ω–∞ <b>{amount}‚ÇΩ</b>", user_id, message_id, 
                parse_mode='html', reply_markup=markup)

            await state.update_data(
                amount=amount,
                id_deposit=payment.id
            )
            await States.Payment.set()

            # await state.finish()
            # await dp.bot.send_invoice(
            #     chat_id=message.from_user.id,
            #     title=f'UpTool Payment',
            #     description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ {amount}‚ÇΩ',
            #     payload=str(random.randint(0, 10000000)),
            #     provider_token=config.PROVIDER_TOKEN,
            #     currency='RUB',
            #     start_parameter=f'deposit_{amount}_rub',
            #     prices=[
            #         LabeledPrice(
            #             label=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount}‚ÇΩ',
            #             amount=amount*100
            #         )
            #     ]
            # )
    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=return_keyboard)


# @dp.pre_checkout_query_handler()
# async def process_pre_checkout_query(query: PreCheckoutQuery):
#     await dp.bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, 
#         ok=True)
#     user = await quick_commands.select_user(message.from_user.id)
#     previous_balance = user.balance
#     await quick_commands.increase_user_balance(message.from_user.id, previous_balance, amount)
#     await dp.bot.send_message(chat_id=query.from_user.id, 
#         text='–í–∞—à –∫–æ—à–µ–ª—ë–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω!')





@dp.callback_query_handler(state=States.Payment, text='paid')
async def approve_payment(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    amount = data.get("amount")
    id_deposit = data.get("id_deposit")
    payment = Payment(amount=amount, id=id_deposit)
    markup = await markup_pay(payment.invoice)
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=markup)
        return
    except NotEnoughMoney:
        await call.message.edit_text("–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π", reply_markup=markup)
        return

    else:
        user = await quick_commands.select_user(call.from_user.id)
        previous_balance = user.balance
        await quick_commands.increase_user_balance(call.from_user.id, previous_balance, amount)
        await quick_commands.updated_at_user(
                call.from_user.id, datetime.datetime.now())
        await call.message.edit_text(f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{amount}‚ÇΩ</b>!', parse_mode='html', reply_markup=return_keyboard)
        await state.finish()
        await state.update_data(message_id=call.message.message_id)



# ----------------------- –£ –° –õ –£ –ì –ò -------------------------


@dp.callback_query_handler(text='order')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    orders = await quick_commands.select_orders_by_user(user.user_id)
    sorted_orders_ids = quick_commands.sorted_orders(orders, 'created_at')
    sorted_orders = []
    if sorted_orders_ids != []:
        for order_id in sorted_orders_ids:
            sorted_orders.append(await quick_commands.select_order_by_order_id(order_id))
        
        services_keyboard_last_order = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="views"),
            InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="subs"),
            InlineKeyboardButton(text="–†–µ–∞–∫—Ü–∏–∏", callback_data="reactions")],
            [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ü©Ô∏è", callback_data=f"repeat:{sorted_orders[-1].action}:{sorted_orders[-1].amount}:{sorted_orders[-1].service_id}:{sorted_orders[-1].money}")],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìÅ", callback_data="cancel")]
        ])
    if orders == []:
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é', 
            reply_markup=services_keyboard)
    else:
            if sorted_orders[-1].action == 'reactions':
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} —Ä–µ–∞–∫—Ü–∏–π</b> {rct[f"{sorted_orders[-1].service_id}"]}', reply_markup=services_keyboard_last_order)
            elif sorted_orders[-1].action == 'views':
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>', reply_markup=services_keyboard_last_order)
            elif sorted_orders[-1].action == 'subs':
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>', reply_markup=services_keyboard_last_order)


# --------------------- –ü –† –û –° –ú –û –¢ –† –´ ---------------------


@dp.callback_query_handler(text='views')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ—Ç –ø–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', reply_markup=return_keyboard)
    await States.Views_Link.set()


@dp.callback_query_handler(text='views_instant')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', reply_markup=return_keyboard)
    await States.Views.set()


@dp.message_handler(state=States.Views_Link, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_chat.username is None:
        await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
        await message.delete()
    else:
        try:
            link = 'https://t.me/' + message.forward_from_chat.username + '/' + str(message.forward_from_message_id)
            await message.delete()
            await state.update_data(link=link)            
            await dp.bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', user_id, message_id, reply_markup=return_keyboard)
            await States.Views.set()
        except AttributeError:
            await message.delete()


@dp.message_handler(state=States.Views, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 100:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - 100", user_id, message_id, reply_markup=return_keyboard)
        else:
            user = await quick_commands.select_user(user_id)
            balance = user.balance
            money = round((amount * 0.003), 2)
            if round(balance, 2) < money:
                await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
            else:
                link = data.get("link")
                await quick_commands.decrease_user_balance(user_id, balance, money)
                await quick_commands.updated_at_user(
                    user_id, datetime.datetime.now())
                sss = await quick_commands.select_settings('views')
                service_id = sss.service_id
                order = await api_service(service_id, link, amount)
                await quick_commands.add_order(str(order), user_id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ', user_id, message_id, reply_markup=return_keyboard)
                await state.finish()
                await state.update_data(message_id=message_id)
            
    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=return_keyboard)



# -------------------------- –ü –û –î –ü –ò –° –ß –ò –ö –ò ----------------------------


@dp.callback_query_handler(text='subs')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç –ª—é–±–æ–π –ø–æ—Å—Ç —Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
        reply_markup=return_keyboard)
    await States.Subs_Link.set()


@dp.callback_query_handler(text='subs_instant')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á—å –Ω–∞ –∫–∞–Ω–∞–ª",
        reply_markup=return_keyboard)
    await States.Subs.set()


@dp.message_handler(state=States.Subs_Link, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_chat.username is None:
        await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
        await message.delete()
        await state.finish()
    else:
        try:
            link_username = 'https://t.me/' + message.forward_from_chat.username
            await message.delete()
            await state.update_data(link_username=link_username)
            await dp.bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á—å –Ω–∞ –∫–∞–Ω–∞–ª', user_id, message_id, reply_markup=return_keyboard)
            await States.Subs.set()
        except AttributeError:
            await message.delete()


@dp.message_handler(state=States.Subs, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 500:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 500", user_id, message_id, reply_markup=return_keyboard)
        else:
            user = await quick_commands.select_user(user_id)
            balance = user.balance
            money = round((amount * 0.25), 2)
            if round(balance, 2) < money:
                await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
            else:
                link_username = data.get("link_username")
                await quick_commands.decrease_user_balance(user_id, balance, money)
                await quick_commands.updated_at_user(
                    user_id, datetime.datetime.now())
                sss = await quick_commands.select_settings('subs')
                service_id = sss.service_id
                order = await api_service(service_id, link_username, amount)
                await quick_commands.add_order(str(order), user_id, 'subs', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª {link_username}', money, datetime.datetime.now())
                await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', user_id, message_id, reply_markup=return_keyboard)
                await state.finish()
                await state.update_data(message_id=message_id)
            
    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=return_keyboard)



# --------------------------- –† –ï –ê –ö –¶ –ò –ò ------------------------------


@dp.callback_query_handler(text='reactions')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ—Ç –ø–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏",
        reply_markup=return_keyboard
    )
    await States.Reactions_Link.set()


@dp.callback_query_handler(text='reactions_instant')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ä–µ–∞–∫—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ",
        reply_markup=reactions_keyboard
    )


@dp.message_handler(state=States.Reactions_Link, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_message_id is None:
        await message.delete()
    else:
        if message.forward_from_chat.username is None:
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
            await message.delete()
        else:
            link = 'https://t.me/' + message.forward_from_chat.username + '/' +str(message.forward_from_message_id)
            await message.delete()
            await state.update_data(link=link)
            await dp.bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ä–µ–∞–∫—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ', user_id, message_id, reply_markup=reactions_keyboard)


@dp.callback_query_handler(text_contains='reaction:')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    service_id = call.data.split(':')[-1]
    await state.update_data(service_id=service_id)
    await call.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–æ —á–∏—Å–ª–æ —Ä–µ–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', 
        reply_markup=return_keyboard
    )
    await States.Reactions.set()


@dp.message_handler(state=States.Reactions, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 50:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π - 50", user_id, message_id, reply_markup=return_keyboard)
        else:
            user = await quick_commands.select_user(message.from_user.id)
            balance = user.balance
            money = round((amount * 0.2), 2)
            if round(balance, 2) < money:
                await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
            else:
                service_id = data.get("service_id")
                link = data.get("link")
                await quick_commands.decrease_user_balance(user_id, balance, money)
                await quick_commands.updated_at_user(
                    user_id, datetime.datetime.now())
                order = await api_service(service_id, link, amount)
                await quick_commands.add_order(str(order), user_id, 'reactions', amount, service_id, f'–æ—Ç {time_now()} –Ω–∞ <b>{reactions_amount}</b> —Ä–µ–∞–∫—Ü–∏–π {rct[f"{service_id}"]} –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', user_id, message_id, reply_markup=return_keyboard)
                await state.finish()
                await state.update_data(message_id=message_id)
                
            
    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=return_keyboard)    


# ------------------- –¢ –ï –° –¢ –û –í –´ –ï   3 –ö -------------------


@dp.callback_query_handler(text='test_3k')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(f'–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>{user.test_3k}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ—Ç –ø–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ —Ö–∞–ª—è–≤–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã', reply_markup=return_keyboard)
    await States.Test_3K.set()


@dp.callback_query_handler(text='test_3k_instant')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    await state.update_data(message_id=call.message.message_id)
    await call.edit_message_text(f'–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>{user.test_3k}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', reply_markup=return_keyboard)
    await States.Test_3K_Views.set()   


@dp.message_handler(state=States.Test_3K_Views, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    user = await quick_commands.select_user(user_id)
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 100:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - 100", user_id, message_id, reply_markup=return_keyboard)
        elif amount > user.test_3k:
            await dp.bot.edit_message_text(f"–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ. –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.test_3k} —Ö–∞–ª—è–≤–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", user_id, message_id, reply_markup=return_keyboard)
        else:
            link = data.get('link')
            sss = await quick_commands.select_settings('views')
            service_id = sss.service_id
            await quick_commands.decrease_test_3k(user_id, user.test_3k, amount)
            order = await api_service(service_id, link, amount)
            await quick_commands.add_order(str(order), user_id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> —Ö–∞–ª—è–≤–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', 0, datetime.datetime.now())
            await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!', user_id, message_id, reply_markup=return_keyboard)
            await state.finish() 
            await state.update_data(message_id=message_id) 

    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=return_keyboard)


@dp.message_handler(state=States.Test_3K, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_message_id is None:
        await message.delete()
    else:
        if message.forward_from_chat.username is None:
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
            await message.delete()
        else:
            try:
                link = 'https://t.me/' + message.forward_from_chat.username + '/' + str(message.forward_from_message_id)
                await message.delete()      
                await state.update_data(link=link)            
                await dp.bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', user_id, message_id, reply_markup=return_keyboard)
                await States.Test_3K_Views.set()   
            except AttributeError:
                await message.delete()


# ------------------ –ü –û –í –¢ –û –† –ò –¢ –¨   –ó –ê –ö –ê –ó ------------------

@dp.callback_query_handler(text_contains='irepeat:')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    action = call.data.split(':')[1]
    amount = int(call.data.split(':')[2])
    service_id = call.data.split(':')[3]
    money = float(call.data.split(':')[4])
    link = data.get('link')
    link_username = data.get('link_username')
    user = await quick_commands.select_user(call.from_user.id)
    balance = user.balance
    if action == 'subs':
        if round(balance, 2) < money:
            await call.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=return_keyboard)
        else:
            await quick_commands.decrease_user_balance(call.from_user.id, balance, money)
            await quick_commands.updated_at_user(
                        call.from_user.id, datetime.datetime.now())
            sss = await quick_commands.select_settings('subs')
            service_id = sss.service_id
            order = await api_service(service_id, link_username, amount)
            await quick_commands.add_order(str(order), call.from_user.id, 'subs', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link_username}', money, datetime.datetime.now())
            await call.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', reply_markup=return_keyboard)
            await state.finish()
            await state.update_data(message_id=call.message.message_id)
    elif action == 'views':
        if round(balance, 2) < money:
            await call.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=return_keyboard)
        else:
            await quick_commands.decrease_user_balance(call.from_user.id, balance, money)
            await quick_commands.updated_at_user(
                        call.from_user.id, datetime.datetime.now())
            sss = await quick_commands.select_settings('views')
            service_id = sss.service_id
            order = await api_service(service_id, link, amount)
            if money == 0:
                await quick_commands.decrease_test_3k(call.from_user.id, user.test_3k, amount)
                await quick_commands.add_order(str(order), call.from_user.id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> —Ö–∞–ª—è–≤–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                await call.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!', reply_markup=return_keyboard)
            else:
                await quick_commands.add_order(str(order), call.from_user.id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                await call.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ.', reply_markup=return_keyboard)
            await state.finish()
            await state.update_data(message_id=call.message.message_id)
    elif action == 'reactions':
        if round(balance, 2) < money:
            await call.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=return_keyboard)
        else:
            await quick_commands.decrease_user_balance(call.from_user.id, balance, money)
            await quick_commands.updated_at_user(
                        call.from_user.id, datetime.datetime.now())
            order = await api_service(service_id, link, amount)
            await quick_commands.add_order(str(order), call.from_user.id, 'reactions', amount, service_id, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> —Ä–µ–∞–∫—Ü–∏–π {rct[f"{service_id}"]} –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
            await call.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', reply_markup=return_keyboard)
            await state.finish()
            await state.update_data(message_id=call.message.message_id)



@dp.callback_query_handler(text_contains='repeat:')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    action = call.data.split(':')[1]
    amount = int(call.data.split(':')[2])
    service_id = call.data.split(':')[3]
    money = float(call.data.split(':')[4])
    await state.update_data(
        message_id=call.message.message_id,
        action=action,
        amount=amount,
        service_id=service_id,
        money=money
        )
    if action == 'subs':
        await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç –ª—é–±–æ–π –ø–æ—Å—Ç —Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', reply_markup=return_keyboard)
        await States.Repeat.set()
    elif action == 'reactions':
        await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ—Ç –ø–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', reply_markup=return_keyboard)
        await States.Repeat.set()
    elif action == 'views':
        await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ—Ç –ø–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', reply_markup=return_keyboard)
        await States.Repeat.set()





@dp.message_handler(state=States.Repeat, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_message_id is None:
        await message.delete()
    else:
        if message.forward_from_chat.username is None:
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
            await message.delete()
        else:
            link = 'https://t.me/' + message.forward_from_chat.username + '/' +str(message.forward_from_message_id)
            link_username = 'https://t.me/' + message.forward_from_chat.username
            await message.delete()
            action = data.get("action")
            amount = data.get("amount")
            service_id = data.get("service_id")
            money = data.get("money")
            user = await quick_commands.select_user(user_id)
            balance = user.balance
            if action == 'subs':
                if round(balance, 2) < money:
                    await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
                else:
                    await quick_commands.decrease_user_balance(user_id, balance, money)
                    await quick_commands.updated_at_user(
                        user_id, datetime.datetime.now())
                    sss = await quick_commands.select_settings('subs')
                    service_id = sss.service_id
                    order = await api_service(service_id, link_username, amount)
                    await quick_commands.add_order(str(order), user_id, 'subs', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link_username}', money, datetime.datetime.now())
                    await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', user_id, message_id, reply_markup=return_keyboard)
                    await state.finish()
                    await state.update_data(message_id=message_id)
            elif action == 'views':
                if round(balance, 2) < money:
                    await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
                else:
                    await quick_commands.decrease_user_balance(user_id, balance, money)
                    await quick_commands.updated_at_user(
                        user_id, datetime.datetime.now())
                    sss = await quick_commands.select_settings('views')
                    service_id = sss.service_id
                    order = await api_service(service_id, link, amount)
                    if money == 0:
                        await quick_commands.decrease_test_3k(user_id, user.test_3k, amount)
                        await quick_commands.add_order(str(order), user_id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> —Ö–∞–ª—è–≤–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                        await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!', user_id, message_id, reply_markup=return_keyboard)
                    else:
                        await quick_commands.add_order(str(order), user_id, 'views', amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                        await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ.', user_id, message_id, reply_markup=return_keyboard)
                    await state.finish()
                    await state.update_data(message_id=message_id)
            elif action == 'reactions':
                if round(balance, 2) < money:
                    await dp.bot.edit_message_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.', user_id, message_id, reply_markup=return_keyboard)
                else:
                    await quick_commands.decrease_user_balance(user_id, balance, money)
                    await quick_commands.updated_at_user(
                        user_id, datetime.datetime.now())
                    order = await api_service(service_id, link, amount)
                    await quick_commands.add_order(str(order), user_id, 'reactions', amount, service_id, f'–æ—Ç {time_now()} –Ω–∞ <b>{amount}</b> —Ä–µ–∞–∫—Ü–∏–π {rct[f"{service_id}"]} –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())
                    await dp.bot.edit_message_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –°—Ç–æ–∏–º–æ—Å—Ç—å - {money}‚ÇΩ. –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.', user_id, message_id, reply_markup=return_keyboard)
                    await state.finish()
                    await state.update_data(message_id=message_id)


# ------------------ –ê –í –¢ –û –ü –† –û –î –í –ò –ñ –ï –ù –ò –ï ------------------


@dp.callback_query_handler(text='auto')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–ê–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–≥–¥–∞ –±–µ–∑ –í–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω–æ–µ –í–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. –°–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å –±–∞–ª–∞–Ω—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.', reply_markup=auto_buttons_keyboard)


@dp.callback_query_handler(text='auto_connect')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É, —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–π –ø–æ—Å—Ç –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å—é–¥–∞.', reply_markup=return_keyboard)
    await States.Auto_Link.set()


@dp.callback_query_handler(text='auto_disconnect')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    autos = await quick_commands.select_auto_user_id(call.from_user.id)
    msg = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:\n\n'
    for auto in range(len(autos)):
        if autos[auto].service == 'views':
            msg += f'{auto+1}. –ö–∞–Ω–∞–ª t.me/{autos[auto].username}, –ø–æ {autos[auto].amount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç\n\n'
    if msg == '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:\n\n':
        msg = '–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è'
        await call.message.edit_text(msg, reply_markup=return_keyboard)
    else:
        markup = await markup_disconnect(autos)
        msg += '–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º'
        await call.message.edit_text(msg, reply_markup=markup)


@dp.callback_query_handler(text_contains='auto_id:')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    auto = await quick_commands.delete_auto_id(int(call.data.split(':')[-1]))
    await call.message.edit_text('–£—Å–ª—É–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=return_keyboard)


@dp.callback_query_handler(text='check_auto')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    autos = await quick_commands.select_auto_user_id(call.from_user.id)
    msg = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:\n\n'
    for auto in range(len(autos)):
        if autos[auto].service == 'views':
            msg += f'{auto+1}. –ö–∞–Ω–∞–ª t.me/{autos[auto].username}, –ø–æ {autos[auto].amount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç\n\n'
    if msg == '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:\n\n':
        msg = '–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è'
    await call.message.edit_text(msg, reply_markup=return_keyboard)


@dp.message_handler(state=States.Auto_Link, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_message_id is None:
        await message.delete()
    else:
        if message.forward_from_chat.username is None:
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
            await message.delete()
        else:
            await state.update_data(username=message.forward_from_chat.username)
            await message.delete()
            await dp.bot.edit_message_text('–¢–µ–ø–µ—Ä—å –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –ñ–º–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ', user_id, message_id, reply_markup=auto_keyboard)


@dp.callback_query_handler(state=States.Auto_Link, text='bot')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    username = data.get('username')
    try:
        admins = await dp.bot.get_chat_administrators('@'+username)
        await call.message.edit_text('–û—Ç–ª–∏—á–Ω–æ. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', 
            reply_markup=cancel_keyboard)
        await States.Auto_Views.set()
    except ChatNotFound:
        await call.message.edit_text('–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! –í—ã –ø–æ–∫–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.', reply_markup=auto_keyboard)


@dp.message_handler(state=States.Auto_Views, content_types=ContentType.ANY)
async def button(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        await message.delete()
        if amount < 100:
            await dp.bot.edit_message_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - 100", user_id, message_id, reply_markup=cancel_keyboard)
        else:
            username = data.get('username')
            await quick_commands.add_auto(id=random.randint(1, 10000000), username=username, user_id=user_id, service='views', amount=amount)
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!', user_id, message_id, reply_markup=return_keyboard)
            await state.finish()
            await state.update_data(message_id=message_id)
            
    except ValueError:
        await message.delete()
        await dp.bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", user_id, message_id, reply_markup=cancel_keyboard)


@dp.channel_post_handler()
async def button(message: Message):
    auto = await quick_commands.select_auto_username(username=message.chat.username)
    link = 'https://t.me/' + message.chat.username + '/' + str(message.message_id)
    for au in auto:
        if au.service == 'views':
            user = await quick_commands.select_user(au.user_id)
            balance = user.balance
            money = round((au.amount * 0.003), 2)
            if round(balance, 2) < money:
                pass
            else:
                await quick_commands.decrease_user_balance(au.user_id, balance, money)
                await quick_commands.updated_at_user(au.user_id, datetime.datetime.now())
                sss = await quick_commands.select_settings('views')
                service_id = sss.service_id
                order = await api_service(service_id, str(link), int(au.amount))
                # await dp.bot.send_message(au.user_id, order)
                await quick_commands.add_order(str(order), au.user_id, 'views', au.amount, None, f'–æ—Ç {time_now()} –Ω–∞ <b>{au.amount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {link}', money, datetime.datetime.now())


# ------------------------ –ü –† –ê –ô –° --------------------------


@dp.callback_query_handler(text='price')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('''–ü—Ä–∞–π—Å:\n1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 250‚ÇΩ\n1000 —Ä–µ–∞–∫—Ü–∏–π - 200‚ÇΩ\n1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞ - 3‚ÇΩ''', 
        reply_markup=prices_keyboard)


@dp.callback_query_handler(text='views_price')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(
        '1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞ - 3‚ÇΩ',
        parse_mode='html', reply_markup=return_keyboard
    )

@dp.callback_query_handler(text='subs_price')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(
        '1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 250‚ÇΩ',
        parse_mode='html', reply_markup=return_keyboard
    )

@dp.callback_query_handler(text='reactions_price')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(
        '1000 —Ä–µ–∞–∫—Ü–∏–π - 200‚ÇΩ',
        parse_mode='html', reply_markup=return_keyboard
    )


# --------------------- –ò –ù –° –¢ –† –£ –ö –¶ –ò –Ø --------------------


@dp.callback_query_handler(text='instruction')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º. –î–ª—è –ª—é–±–æ–π —É—Å–ª—É–≥–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞, –¥–∞–∂–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.', reply_markup=return_keyboard)


# ---------------------- –ü –û –î –î –ï –† –ñ –ö –ê ---------------------


@dp.callback_query_handler(text='support')
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @ToolSupports', reply_markup=return_keyboard)


# ------------------- –û –¢ –° –õ –ï –î –ò –¢ –¨   –ó –ê –ö –ê –ó –´ ---------------------


@dp.callback_query_handler(text='tracking')
async def button(call: CallbackQuery, state: FSMContext):
    orders = await quick_commands.select_orders_by_user(call.from_user.id)
    msg_text = '<b>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤</b>\n\n'
    msg_error = '–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥'
    cancelled_orders = []
    if orders is None or orders == []:
        msg_text += '–£ –í–∞—Å –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤.'
    else:
        sorted_orders_ids = quick_commands.sorted_orders(orders, 'created_at')
        sorted_orders = []
        if sorted_orders_ids != []:
            for order_id in sorted_orders_ids:
                sorted_orders.append(await quick_commands.select_order_by_order_id(order_id))
        for order in sorted_orders[-10:]:
            previous_status = order.status
            status = await api_status(order.order_id)
            if status == 'Canceled' and status != previous_status:
                cancelled_orders.append(order)
            msg_text += f'–ó–∞–∫–∞–∑ {order.description}\n–°—Ç–∞—Ç—É—Å: {status}\n\n'
            # await quick_commands.update_order_status(order.order_id, status)
    await call.answer()
    await call.message.edit_text(msg_text, parse_mode='html', disable_web_page_preview=True, reply_markup=return_keyboard)
    if cancelled_orders != []:
        for order in cancelled_orders:
            user = await quick_commands.select_user(call.from_user.id)
            previous_balance = user.balance
            await quick_commands.increase_user_balance(call.from_user.id, previous_balance, order.money)
        await asyncio.sleep(2)
        msg = await call.message.answer(msg_error)
        await asyncio.sleep(10)
        await dp.bot.delete_message(call.from_user.id, msg.message_id)


# --------- –û –ë –© –ò –ï   –ù –ê –° –¢ –† –û –ô –ö –ò   ( –ö –û –ú –ê –ù –î –´ ) -------------


@dp.callback_query_handler(state='*', text='cancel')
async def cancel_payment(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    if call.from_user.id in [1247122892, 1048524289, 83335761]:
        if user.test_3k > 0:
            msg = await call.message.edit_text('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_VIP_test)
        else:
            msg = await call.message.edit_text('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_VIP)
    else:
        if user.test_3k > 0:
            msg = await call.message.edit_text('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard_test)
        else:
            msg = await call.message.edit_text('–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–∞–±–ª–∏–∫–∞—Ö', reply_markup=main_keyboard)

    await state.finish()
    await state.update_data(message_id=call.message.message_id)


@dp.message_handler(content_types=ContentType.ANY)
async def cancel_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    if message.forward_from_message_id is None:
        if message.text != '/start':
            await message.delete()
    else:
        if message.forward_from_chat.username is None:
            await dp.bot.edit_message_text('–£—Å–ª—É–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', user_id, message_id, reply_markup=return_keyboard)
            await message.delete()
        else:
            link = 'https://t.me/' + message.forward_from_chat.username + '/' + str(message.forward_from_message_id)
            link_username = 'https://t.me/' + message.forward_from_chat.username
            await message.delete()
            user = await quick_commands.select_user(user_id)
            await state.update_data(link=link, link_username=link_username)

            orders = await quick_commands.select_orders_by_user(user.user_id)
            sorted_orders_ids = quick_commands.sorted_orders(orders, 'created_at')
            sorted_orders = []
            if sorted_orders_ids != []:
                for order_id in sorted_orders_ids:
                    sorted_orders.append(await quick_commands.select_order_by_order_id(order_id))
                
                services_keyboard_last_order_instant = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="views_instant"),
                    InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="subs_instant"),
                    InlineKeyboardButton(text="–†–µ–∞–∫—Ü–∏–∏", callback_data="reactions_instant")],
                    [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ü©Ô∏è", callback_data=f"irepeat:{sorted_orders[-1].action}:{sorted_orders[-1].amount}:{sorted_orders[-1].service_id}:{sorted_orders[-1].money}")],
                    [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìÅ", callback_data="cancel")]
                ])  
            if orders == []:
                await dp.bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é", user_id, message_id, reply_markup=services_keyboard_instant)
            else:
                if sorted_orders[-1].action == 'reactions':
                    await dp.bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} —Ä–µ–∞–∫—Ü–∏–π</b> {rct[f"{sorted_orders[-1].service_id}"]}', user_id, message_id, reply_markup=services_keyboard_last_order_instant)
                elif sorted_orders[-1].action == 'views':
                    await dp.bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>', user_id, message_id, reply_markup=services_keyboard_last_order_instant)
                elif sorted_orders[-1].action == 'subs':
                    await dp.bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é\n\nP.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <b>{sorted_orders[-1].amount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>', user_id, message_id, reply_markup=services_keyboard_last_order_instant)


@dp.callback_query_handler(text='commands')
async def frhefh(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–±–µ—Ä–µ—Ç–µ?', 
        reply_markup=commands_keyboard)


@dp.callback_query_handler(text='mailing_all')
async def frhefh(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text('–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.')
    await States.Send_All.set()


@dp.message_handler(state=States.Send_All)
async def frhefh(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    message_id = data.get("message_id")
    user_id = message.from_user.id
    await message.delete()
    await dp.bot.edit_message_text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç?', 
        user_id, message_id, reply_markup=confirm_keyboard)
    await States.Confirm_All.set()


@dp.callback_query_handler(text='confirm', state=States.Confirm_All)
async def button(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è...')
    await asyncio.sleep(3)
    ids = await quick_commands.users_ids_all()
    data = await state.get_data()
    text = data.get('text')
    for id in ids:
        try:
            await dp.bot.send_message(id, text)
        except BotBlocked:
            pass
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!', 
        reply_markup=return_keyboard)
    await state.finish()
    await state.update_data(message_id=call.message.message_id)


@dp.callback_query_handler(text='statistics')
async def frhefh(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text('–ö–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±–µ—Ä–µ—Ç–µ?', 
        reply_markup=statistics_keyboard)


@dp.callback_query_handler(text='today')
async def frhefh(call: CallbackQuery, state: FSMContext):
    users = await quick_commands.view_all_users()
    msg = f'<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É—é—Ç—Å—è {len(users)} —á–µ–ª–æ–≤–µ–∫.\n\n</b>'
    msg_new = ''
    users_today = 0
    for user in users:
        money = 0
        orders = await quick_commands.select_orders_by_user(user.user_id)
        for order in orders:
            money += order.money
        if user.created_at.date() == datetime.datetime.today().date():
            users_today += 1
            if users_today == 51:
                break
            if user.username is None:
                msg_new += f'ID: {user.user_id}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
            else:
                msg_new += f'ID: {user.user_id}\nUsername: @{user.username}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
    if users_today > 0:
        msg += f'<b>–°–µ–≥–æ–¥–Ω—è –¥–æ–±–∞–≤–∏–ª–æ—Å—å {users_today} —á–µ–ª–æ–≤–µ–∫.\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'
    else:
        msg_new = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å'
    await call.answer()
    await call.message.edit_text(msg+msg_new, parse_mode='html', 
        reply_markup=commands_return_keyboard)


@dp.callback_query_handler(text='yesterday')
async def frhefh(call: CallbackQuery, state: FSMContext):
    users = await quick_commands.view_all_users()
    msg = f'<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É—é—Ç—Å—è {len(users)} —á–µ–ª–æ–≤–µ–∫.\n\n</b>'
    msg_new = ''
    users_yesterday = 0
    for user in users:
        money = 0
        orders = await quick_commands.select_orders_by_user(user.user_id)
        for order in orders:
            money += order.money
        if user.created_at.date() == datetime.datetime.today().date()-datetime.timedelta(days=1):
            users_yesterday += 1
            if users_yesterday == 51:
                break
            if user.username is None:
                msg_new += f'ID: {user.user_id}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
            else:
                msg_new += f'ID: {user.user_id}\nUsername: @{user.username}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
    if users_yesterday > 0:
        msg += f'<b>–í—á–µ—Ä–∞ –¥–æ–±–∞–≤–∏–ª–æ—Å—å {users_yesterday} —á–µ–ª–æ–≤–µ–∫.\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'
    else:
        msg_new = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å'
    await call.answer()
    await call.message.edit_text(msg+msg_new, parse_mode='html', 
        reply_markup=commands_return_keyboard)
        

@dp.callback_query_handler(text='3days')
async def frhefh(call: CallbackQuery, state: FSMContext):
    users = await quick_commands.view_all_users()
    msg = f'<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É—é—Ç—Å—è {len(users)} —á–µ–ª–æ–≤–µ–∫.\n\n</b>'
    msg_new = ''
    users_3days = 0
    for user in users:
        money = 0
        orders = await quick_commands.select_orders_by_user(user.user_id)
        for order in orders:
            money += order.money
        if user.created_at.date() >= datetime.datetime.today().date()-datetime.timedelta(days=2):
            users_3days += 1
            if users_3days == 51:
                break
            if user.username is None:
                msg_new += f'ID: {user.user_id}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
            else:
                msg_new += f'ID: {user.user_id}\nUsername: @{user.username}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
    if users_3days > 0:
        msg += f'<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –¥–æ–±–∞–≤–∏–ª–æ—Å—å {users_3days} —á–µ–ª–æ–≤–µ–∫.\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'
    else:
        msg_new = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å'
    await call.answer()
    await call.message.edit_text(msg+msg_new, parse_mode='html', 
        reply_markup=commands_return_keyboard)
        

@dp.callback_query_handler(text='active')
async def frhefh(call: CallbackQuery, state: FSMContext):
    users_q = await quick_commands.view_all_users()
    msg = f'<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É—é—Ç—Å—è {len(users_q)} —á–µ–ª–æ–≤–µ–∫.\n\n</b>'
    msg_new = ''
    users_active = 0
    sorted_users_ids = quick_commands.sorted_users(users_q, 'updated_at')
    users = []
    if sorted_users_ids != []:
        for user_id in sorted_users_ids:
            users.append(await quick_commands.select_user(int(user_id)))
    for user in users:
        money = 0
        orders = await quick_commands.select_orders_by_user(user.user_id)
        for order in orders:
            money += order.money
        if user.balance != 0:
            users_active += 1
            if users_active == 51:
                break
            if user.username is None:
                msg_new += f'ID: {user.user_id}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'
            else:
                msg_new += f'ID: {user.user_id}\nUsername: @{user.username}\n–ù–∏–∫–Ω–µ–π–º: {user.fullname}\n–ë–∞–ª–∞–Ω—Å: <b>{round(user.balance, 2)}‚ÇΩ</b>\n–ó–∞–∫–∞–∑—ã: <b>{round(money, 2)}‚ÇΩ</b>\n\n'  
    if users_active > 0:
        msg += f'<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_active}.\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'
    else:
        msg_new = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    await call.answer()
    await call.message.edit_text(msg+msg_new, parse_mode='html', 
        reply_markup=commands_return_keyboard)